import testlib
import random
from ddt import file_data, ddt, data, unpack

# change this variable to True to disable timeout and enable print
DEBUG=True
DEBUG=False

TIMEOUT=6 * 2 # VM warp factor

@ddt
class Test(testlib.TestCase):
    def do_test(self, list_of_xkcd : list[str], k : int, expected : list[int]):
        """Test implementation
        - list_of_xkcd:		list of xkcd formatted strings
        - k:			    how many maxima to return
        - expected:		    expected result
        TIMEOUT: 2 seconds for each test
        """
        tuple_of_xkcd = tuple(list_of_xkcd)
        if DEBUG:
                import program01 as program
                result = program.decode_XKCD_tuple(tuple_of_xkcd, k)
        else:
            with    self.ignored_function('builtins.print'), \
                    self.ignored_function('pprint.pprint'), \
                    self.forbidden_function('builtins.input'), \
                    self.forbidden_function('builtins.eval'), \
                    self.check_imports(allowed=['program01','_io', 'typing']), \
                    self.timeout(TIMEOUT), \
                    self.timer(TIMEOUT):
                import program01 as program
                result = program.decode_XKCD_tuple(tuple_of_xkcd, k)
        for r in result:
            self.assertTrue(0<r<4000,
                          (f"All result numbers must be bigger than 0 and lower than 4000 (you got {r})\n"
                           f"Tutti i numeri ottenuti devono essere maggiori di 0 e minori di 4000 (hai ottenuto {r})"))
        self.assertEqual(len(result), k,
                         (f'The output list should have {k} elements\n'
                          f'La lista risultante deve avere {k} elementi'))
        self.assertSetEqual(set(result), set(expected), 
                         (f"The set of result numbers is different than the set of expected ones\n",
                          f"L'insieme dei numeri tornati nel risultato non corrisponde all'insieme dei valori attesi"))
        self.assertEqual(result, sorted(result, reverse=True),
                         (f"The result should be sorted by decreasing values\n",
                          f"Il risultato deve essere ordinato in ordine decrescente"))
        self.assertEqual(result, expected,
                         ('The return value is incorrect\n'
                          'Il valore di ritorno è errato'))
        return 1

    def test_intricacy(self):
        self.check_max_ciclomatic_complexity()

    def test_zz_top_types(self):
        from typeguard.importhook import install_import_hook
        try:
            import sys
            del sys.modules['program01']
        except:pass
        with install_import_hook('program01'):
            import program01
            self.test_example1()

    @data (
            ("1101001000",           889),
            ("1000100100010100110", 1999),
            ("100010001050015" ,    2494),
            ("50010010050101015",    774)
             )
    @unpack
    def test_decode_value( self, xkcd : str, expected : int ):
        import program01 as program
        result = program.decode_value(xkcd)
        self.assertEqual(result, expected,
                         ('The return value is incorrect\n'
                          'Il valore di ritorno è errato'))

    @data (
             # list of weights                  expected,    error
            ([1, 10, 100, 1000],                     889,    1111),
            ([1000, 100, 1000, 10, 100, 1, 10],     1999,    2221),
            ([1000, 1000, 10, 500, 1, 5] ,          2494,    2516),
            ([500, 100, 100, 50, 10, 10, 1, 5],      774,     776)
             )
    @unpack
    def test_list_of_weigths_to_number( self, integers : list[int], expected : int, error1 : int ):
        import program01 as program
        result = program.list_of_weights_to_number(integers)
        self.assertNotEqual(result, error1,
                            ("You did not subtract weights that are followed by heavier weights\n",
                             "Non hai sottratto i pesi che sono seguiti da pesi maggiori"))
        self.assertEqual(result, expected,
                         ('The return value is incorrect\n'
                          'Il valore di ritorno è errato'))

    @data ( [1, 10, 100, 1000],
            [1000, 100, 1000, 10, 100, 1, 10], 
            [1000, 1000, 10, 500, 1, 5] ,     
            [500, 100, 100, 50, 10, 10, 1, 5],
             )
    def test_xkcd_to_list_of_weights(self, expected : list[int]):
        import program01 as program
        xkcd = ''.join(map(str,expected))
        result = program.xkcd_to_list_of_weights(xkcd)
        self.assertEqual(result, expected,
                         ('The return value is incorrect\n'
                          'Il valore di ritorno è errato'))

    def test_example1(self):
        list_of_xkcd  = [ "1000100100010100110",  "100010001050015" , "50010010050101015"]
        k        = 2
        expected = [2494, 1999]
        return self.do_test(list_of_xkcd  , k, expected)

    def test_strange_numbers(self):
        list_of_xkcd, k = ['100', '1050500', '15051000', '5005051', '500100', '11010010', '511000', '500500', '1000500', '5501000', '1001000', '10051', '10', '50010500', '1500100', '5001', '100010500', '50010010', '15050010', '500150', '100', '50500', '10501000', '550100', '501501011000', '10101100', '500100', '5500100', '105001500', '100050', '1050050', '5001000', '1011001', '10001000', '505001', '5011010', '1000', '1010', '5100', '501005', '1005100', '515', '1000500501000', '100', '150500', '110001000', '1100', '15550', '100050', '50515', '15551001', '55', '150100', '10011000', '510001', '5100101', '500100100100', '55', '10005100', '500', '510550', '150', '5051050', '101500', '1505001', '1150010', '15015500500', '510001', '5005', '51500', '505100', '100010', '1001000', '500500', '101000', '51000', '10100', '1000500', '50', '50010010', '500501', '500', '1005001000', '10100510', '100', '105005100', '50100150', '10011', '500100', '1000101', '515005', '10015', '1501000', '100050', '100050', '5005500', '1001005', '501000', '550010010100', '501000100', '101010', '50051000', '1101000', '10050', '1010010100', '11000501', '51', '111050', '1005', '1050', '1001001', '501', '11001000', '5001000100', '10100', '10500', '1000', '110001500100', '1001', '55500', '10010', '50050', '1001000', '11000', '500100010', '51000', '50', '100100', '100505', '50', '500', '100', '10001000', '100100', '1055100', '10', '10500', '101000', '1000', '50100', '10005500', '100', '10500', '5001', '500100', '101050', '5005', '5100050', '1511000', '1000100', '1010001000', '501000', '50050', '11100100', '1000100', '100500100', '510011000', '50', '10001000', '1000', '1500105005', '1510150', '1100010510', '500', '101000', '1550101', '500', '10100', '11500', '10505', '550', '1000', '10001000', '500100050', '11000100', '100500', '5001100', '10011', '510010150', '55100', '51000', '501', '100010050', '1010', '10101000', '1005100', '50010', '155', '101510500', '500510', '50100', '1000', '510001000', '55100', '5005050', '100101000', '1101100', '1010100', '10500', '5051000', '100100', '100', '100050050', '150510', '100100', '501000500', '5010', '1000', '100100050', '100', '55100050500', '111000', '100010010', '1000', '510005', '5001000500', '101000', '1000', '1000', '1500', '55050', '15500110', '55010100', '100', '5011010', '50010', '510001', '510501000', '501000', '51', '510005', '5001000100', '501', '1011', '10501000', '110050', '1100100', '50', '510100', '1000', '5001050', '5501001000', '1010001000', '1000500', '11000', '50501', '1001', '100100', '101000', '110101000', '1500', '50055', '55510', '501100', '550101000', '500151050', '100010', '1500', '1100500', '500510', '51005100', '500', '5500', '1005500', '500100', '500100500', '10005', '500100', '500', '505', '15051005', '100050', '1010050', '100551000', '1050', '1100105010', '5055500', '50500', '500100', '55011050', '10100', '10500100', '50055', '100511', '5110', '10', '105050', '11000', '100050', '10001000', '1000', '1000', '500', '1005500', '100500100', '1000100', '1000', '1001500', '5100050', '10', '50011000', '105050', '50500150', '1051105', '10', '51100051000', '1005500', '100', '50010001', '501001011', '10005100', '10050', '1100010', '11000', '150100', '55005050', '1100050', '1000500500', '1000', '105500', '1000', '505100100', '1155', '1001', '1500', '510', '100050105', '500101000', '1000', '1005', '505', '501', '1100050', '1055010050', '1000100', '5051000500', '5050', '10050', '1150', '1005100', '50100', '1001000', '10010050', '100', '100', '501000500', '1000', '50050', '5050101', '50105500', '5110100', '150010', '100500', '50010', '550', '5501000', '550051000', '100100055', '5055050', '1100150', '5100', '5001000', '500', '100050500', '110050', '550', '10105050010', '51010', '1000500500', '1050', '50011150', '500500', '11001000', '10001', '1001000', '1050', '101001010', '100', '100', '1000', '1500', '10105', '100100', '51100', '101', '11501001050', '500500', '55501', '5001050', '55001', '100050', '5010100', '10500', '100150', '10001000', '1000', '500', '1010', '1001000', '51105', '550', '10001050', '500', '1000100', '5001110', '100055', '11150100', '5505050010', '51010', '51000505', '100050010', '100051000', '5501000', '5100', '500', '5500', '500500', '10051', '50', '110005', '100', '5051050', '1000', '100', '10100500', '100100', '501000', '100', '5150', '1000500', '500', '10', '500', '10', '5010100', '501000', '5011000', '110', '100550', '15010', '100105050', '500105', '10005005', '500', '50050', '1010', '5001000', '501000', '10105', '51001000', '50500', '50501000', '101001', '500101', '1000', '10101', '10101000', '50100', '100010', '550150', '5110010', '100500', '505500', '1000551', '10001000', '1101005', '1101', '5001001', '555', '10010100', '1050100', '55010', '15010100', '1001000', '105500', '101500', '501001000', '150', '50150010050', '5001', '50', '10100', '10015', '55005', '50', '505100', '5550', '10010005', '11010055', '1100500', '500100100', '5100', '10001000', '10001100', '550051', '5100050', '1005', '111010100', '10505', '5005050', '55050', '10', '105100050', '5001', '105010100', '50050050', '15001000', '51', '1500', '501', '10100', '101000', '1500', '1000100', '5001', '10010005', '1005010100', '5101100', '1550050', '5001000', '15050', '10500', '150050', '5051011000', '100', '110001', '11000', '1101000', '15010', '5005010500', '51005', '110', '15010010', '500100', '100050010', '50015', '1011500', '1000500', '100055', '1001110550', '5001100', '150100', '11000100100', '105', '10501000500', '51000', '5010100', '15051000', '100', '10105010', '101000', '10510505', '550', '505005', '5101000', '100100010500', '11000101000', '511', '101000', '10', '1000', '505005', '5051001000', '10010', '500', '1000100', '1000', '501000', '10001', '10150', '10500', '10005050', '1050010', '5001000', '101001', '1500500105', '510100', '5005001000', '15100015', '50500501', '100', '50010010', '1000100', '1001010', '15151', '1000100', '100500', '10101', '11010', '10050010', '100510', '51001000', '50050', '50', '100550', '5010005050', '500', '100550100', '10001000100', '50', '51001000', '500', '500', '551001000', '100010', '151000', '10050500', '100010050100', '11500', '10015', '50', '10010150050', '101000', '155', '10501000', '1500500', '101001000', '50010500', '10010', '50', '50100', '550010', '511000', '5001050', '51000', '111001000', '15', '1010', '100', '5010010', '500', '50051000', '100010010', '100', '501000', '10550050', '510001001', '50101', '10505', '500', '100500500', '100500', '550', '101015050', '50500', '5005', '10', '100110', '1000101000', '550', '10005', '11000', '50010', '101000', '50051000', '105510', '500100', '51001000', '5001000', '5501001000', '11', '500', '10051', '1000', '10005', '5001011', '5050', '5010', '10001000', '50550', '55005', '10150011000', '1010', '51', '11001', '505050', '1100500505', '100100', '500500500', '1000', '11001', '101000', '5100', '10101', '155', '501005', '110151100', '550500100500', '100', '500501000', '10010001000', '1110', '10100', '115050', '5010100', '50050', '500511050', '10010050', '10050', '105050', '500', '10505500', '10050100', '500', '550', '515501', '1000500', '10010', '105', '505100', '15010', '1001500', '1000500', '100050500', '500100100', '101110', '10', '55005050100', '110001100', '501100', '1505', '11000', '5010', '100', '1005001001', '105501000', '500500', '101500', '5005', '10500', '111000', '10110', '5050', '10100500', '1001000', '510', '100100500', '501050', '5500', '100', '1000555', '5010', '100010100', '50051000', '100050', '10', '500', '1501050', '50105', '150505', '5551000', '5550100', '10500', '1000', '500501500', '11000', '1510050', '105001', '50050', '151010', '10001', '1001', '100', '505', '5001000', '1005', '101000500', '1010050100', '100010505', '10500', '10', '10050', '1000', '50010', '100100011000', '110001050', '10050500', '1501000', '110011000', '1151550', '101050', '501000', '5500100', '510555', '1511', '11001010', '1000', '100055', '10005001', '5005005', '115', '1050', '10005', '1055500', '5051', '1510505', '500', '1001', '1000500', '50015', '500', '1001100', '151100', '150501500', '51005', '1100501000', '101015', '10010', '1015', '10010001', '1001051000', '105500110', '1000100', '1000101000', '100500', '1000', '100011105', '1001000500', '500500', '1110', '10001', '15011000', '50500', '5501500', '1000', '105001000', '5100011', '110', '1000', '1000500', '500', '100', '100501', '100', '50010', '1000', '1005', '500', '1001', '10001', '1001', '10001000', '105005', '551001000', '10510', '1000500', '10500', '5500', '1010100', '5051000', '110', '50051', '5001100010', '10005500', '501010', '1500500', '1000', '10510001', '5001000', '1001051000', '1010550', '500500', '1100010', '100', '105100', '500100', '100011155', '101000', '10500', '50500', '5010100', '5001', '1000', '5050010001', '100', '5010', '10110', '500', '1000', '1000', '100010011000', '100', '10500500', '1000100', '5055105050', '11500', '50', '50510001', '50', '51000', '1500', '5001150', '510050', '500100', '15510001', '1000100', '100100', '55011000', '1011010005', '10051000', '100150500', '10100100', '100', '5001001000', '105001000', '155001', '1000', '5005005', '50010010010', '110050', '1050500', '110', '10051000', '100010', '1500510', '10', '505', '1101100', '5500550', '1000', '5005500', '10500', '55001001', '50', '1100', '1000', '1000', '105050', '155110', '1010001000', '51011000', '10', '500', '10001000', '1001', '5501001', '101100', '51000', '505010110', '501', '500500100', '11000', '5100500', '1100500', '10', '10055500500', '51050', '1001000', '10001', '1101', '10', '1001000', '100500', '101000500', '100050', '50050105', '5055001100', '10', '1500', '50500', '1100010', '10151000', '110', '10005050', '5001', '110500', '100010001000', '5001500550', '10001000', '1000', '11000150', '500', '500100', '150050', '51000', '100', '15111000', '500110100', '1550', '501001', '1101000', '1100', '5500', '1010550', '10', '500500500', '50100', '50050', '50100', '101000', '11000', '5005010', '100', '5100110', '1100100', '501500', '55100', '100500', '11000', '15'], 227
        expected = [3000, 2450, 2100, 2099, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 1999, 1999, 1995, 1995, 1990, 1990, 1990, 1990, 1990, 1989, 1900, 1899, 1598, 1550, 1545, 1510, 1510, 1509, 1508, 1505, 1501, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1499, 1495, 1495, 1495, 1495, 1495, 1495, 1490, 1490, 1490, 1490, 1490, 1450, 1450, 1450, 1450, 1450, 1450, 1440, 1400, 1400, 1390, 1199, 1150, 1150, 1110, 1110, 1108, 1105, 1105, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1099, 1099, 1099, 1098, 1098, 1096, 1095, 1095, 1095, 1095, 1094, 1090, 1090, 1065, 1055, 1054, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1049, 1049, 1049, 1049, 1049, 1048, 1048, 1046, 1045, 1045, 1045, 1045, 1045, 1045, 1044, 1044, 1044, 1044, 1043, 1040, 1040, 1039, 1035, 1015, 1015, 1014, 1014, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1009, 1009, 1009, 1006, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1003, 1001, 1001, 1001, 1001, 1001, 1001, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
        return self.do_test(list_of_xkcd  , k, expected)


    ######################### SECRET TESTS START HERE! #########################


if __name__ == '__main__':
    Test.main()


